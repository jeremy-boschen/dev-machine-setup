# Custom .bashrc for developer environment

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Set PATH to include dev tools bins
export PATH="$HOME/dev/tools/bin:$PATH"

# Add other tool directories to PATH
if [ -d "$HOME/dev/tools/git/bin" ]; then
    export PATH="$HOME/dev/tools/git/bin:$PATH"
fi

if [ -d "$HOME/dev/tools/node/bin" ]; then
    export PATH="$HOME/dev/tools/node/bin:$PATH"
fi

if [ -d "$HOME/dev/tools/python" ]; then
    export PATH="$HOME/dev/tools/python:$PATH"
fi

if [ -d "$HOME/dev/tools/python/Scripts" ]; then
    export PATH="$HOME/dev/tools/python/Scripts:$PATH"
fi

# SDKMAN initialization
export SDKMAN_DIR="$HOME/dev/tools/sdkman"
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"

# Don't put duplicate lines or lines starting with space in the history
HISTCONTROL=ignoreboth

# Append to the history file, don't overwrite it
shopt -s histappend

# For setting history length
HISTSIZE=1000
HISTFILESIZE=2000

# Check the window size after each command
shopt -s checkwinsize

# Make less more friendly for non-text input files
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set a fancy prompt
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    color_prompt=yes
else
    color_prompt=
fi

if [ "$color_prompt" = yes ]; then
    PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$(__git_ps1 " (%s)") \$ '
else
    PS1='\u@\h:\w$(__git_ps1 " (%s)") \$ '
fi
unset color_prompt

# Enable color support of ls and add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Useful aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Git aliases
alias g='git'
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias glog='git log --oneline --graph --decorate'
alias gd='git diff'
alias gco='git checkout'

# Navigation aliases
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias dev='cd $HOME/dev'
alias code='cd $HOME/dev/code'
alias tools='cd $HOME/dev/tools'
alias scripts='cd $HOME/dev/scripts'

# Tools aliases
alias k='kubectl'
alias py='python'
alias serve='python -m http.server 8000'
alias cat='bat --paging=never'
alias find='fd'
alias grep='rg'
alias ls='ls --color=auto'
alias ll='ls -l'
alias la='ls -la'
alias h='helm'
alias tf='terraform'
alias dc='docker-compose'
alias dps='docker ps'
alias di='docker images'

# Development aliases
alias nr='npm run'
alias ni='npm install'
alias nid='npm install --save-dev'
alias ng='npm global install'
alias nt='npm test'
alias pl='pip list'
alias pi='pip install'
alias pyr='python -m venv venv && source venv/Scripts/activate'
alias act='source venv/Scripts/activate'

# Functions
# Create a new directory and enter it
mkcd() {
    mkdir -p "$1" && cd "$1"
}

# Extract various archive formats
extract() {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2)   tar xjf "$1"     ;;
            *.tar.gz)    tar xzf "$1"     ;;
            *.bz2)       bunzip2 "$1"     ;;
            *.rar)       unrar e "$1"     ;;
            *.gz)        gunzip "$1"      ;;
            *.tar)       tar xf "$1"      ;;
            *.tbz2)      tar xjf "$1"     ;;
            *.tgz)       tar xzf "$1"     ;;
            *.zip)       unzip "$1"       ;;
            *.Z)         uncompress "$1"  ;;
            *.7z)        7z x "$1"        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Find a file with a pattern in name
findfile() {
    find . -type f -name "*$1*"
}

# Find a directory with a pattern in name
finddir() {
    find . -type d -name "*$1*"
}

# Search for a pattern in files
findtext() {
    grep -r "$1" .
}

# Create a backup of a file
backup() {
    cp "$1"{,.bak}
}

# Create a new git repo
gitnew() {
    git init
    touch README.md .gitignore
    git add README.md .gitignore
    git commit -m "Initial commit"
}

# Improved git clone that changes into the cloned directory
clone() {
    git clone "$1" && cd "$(basename "$1" .git)"
}

# Get the current git branch
gitbranch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

# Update all git repositories in a directory
gitupdate() {
    find . -type d -name .git -prune -execdir git pull \;
}

# Shortcut for kubectl get pods
kgp() {
    kubectl get pods "$@"
}

# Shortcut for kubectl get services
kgs() {
    kubectl get services "$@"
}

# Shortcut for kubectl get deployments
kgd() {
    kubectl get deployments "$@"
}

# Watch kubernetes resources
kw() {
    watch -n 2 kubectl get "$@"
}

# Create a new directory, copy a template structure, and initialize
project() {
    local type="${1:-basic}"
    local name="${2:-project}"
    
    mkdir -p "$name"
    cd "$name" || return
    
    case "$type" in
        node)
            echo "Creating Node.js project structure..."
            mkdir -p src test config
            touch README.md .gitignore package.json
            echo '{ "name": "'$name'", "version": "1.0.0", "description": "", "main": "index.js", "scripts": { "test": "echo \"Error: no test specified\" && exit 1" }, "keywords": [], "author": "", "license": "ISC" }' > package.json
            echo 'node_modules\nnpm-debug.log\n.env\n.DS_Store' > .gitignore
            echo "# $name\n\nA new Node.js project." > README.md
            touch src/index.js
            ;;
        python)
            echo "Creating Python project structure..."
            mkdir -p src tests docs
            touch README.md .gitignore requirements.txt
            echo 'venv/\n__pycache__/\n*.py[cod]\n*$py.class\n.env\n.DS_Store' > .gitignore
            echo "# $name\n\nA new Python project." > README.md
            touch src/__init__.py src/main.py
            touch tests/__init__.py
            ;;
        web)
            echo "Creating web project structure..."
            mkdir -p css js img
            touch index.html css/style.css js/script.js
            echo '<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="UTF-8">\n  <meta name="viewport" content="width=device-width, initial-scale=1.0">\n  <title>'$name'</title>\n  <link rel="stylesheet" href="css/style.css">\n</head>\n<body>\n  <h1>'$name'</h1>\n  <script src="js/script.js"></script>\n</body>\n</html>' > index.html
            ;;
        *)
            echo "Creating basic project structure..."
            mkdir -p src docs
            touch README.md .gitignore
            echo "# $name\n\nA new project." > README.md
            ;;
    esac
    
    git init
    git add .
    git commit -m "Initial project structure"
    echo "Project $name created successfully."
}

# Load Git completion if available
if [ -f "$HOME/dev/tools/git/mingw64/share/git/completion/git-completion.bash" ]; then
    source "$HOME/dev/tools/git/mingw64/share/git/completion/git-completion.bash"
fi

# Load Git prompt if available
if [ -f "$HOME/dev/tools/git/mingw64/share/git/completion/git-prompt.sh" ]; then
    source "$HOME/dev/tools/git/mingw64/share/git/completion/git-prompt.sh"
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1
    export GIT_PS1_SHOWUPSTREAM="auto"
    export GIT_PS1_SHOWCOLORHINTS=1
fi

# Welcome message
echo -e "\n\033[1;32mWelcome to your developer environment\033[0m"
echo -e "Type 'help' for bash help or explore the custom aliases and functions."
echo -e "Your development directory is \033[1;34m$HOME/dev\033[0m\n"
